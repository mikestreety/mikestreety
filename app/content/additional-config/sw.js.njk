---
permalink: /sw.js
sitemapIgnore: true
---
/**
 * Service worker
 *
 * @filename sw.js
 * @author Mike Street
 * @author JoÃ£o Augusto
 * @author Oliver Rowlands
 * @date 2019-07-01
 * @copyright Liquid Light Group Ltd.
 * @url http://www.liquidlight.co.uk
 *
 */

/**
 * PWA Config
 */
let config = {};

const defaults = {
	version: ':1.5',
	debug: false,
	offlineAsset: '/offline/',
	priority: {
		name: 'Priority pages',
		key: 'priority',

		pages: [
			'/offline/'
		]
	},

	cayg: {
		name: 'Cache as you go',
		key: 'cayg'
	}
};


config = Object.assign(defaults, config);

const CACHE = config.priority.key + config.version;

// Cache a page and then the assets
let cachePage = (request, response) => {
	const clonedResponse = response.clone();

	caches
		.open(config.cayg.key + config.version)
		.then(cache => cacheAssets(request, clonedResponse));
}

let cacheAssets = (request, response) => {

	/**
	 * Caching Strategies Based on Request Types
	 * https://medium.com/dev-channel/service-worker-caching-strategies-based-on-request-types-57411dd7652c
	 */
	switch (request.destination) {
		case 'style':
		case 'script':
		case 'document':
		case 'image':
		case 'font': {
			caches
				.open(config.cayg.key + config.version)
				.then(cache => cache.put(request.url, response));

			return;
		}

		default: {
			return request;
		}
	}
}

// Cache priority pages
function precache(request) {
	return caches.open(CACHE)
		.then(cache => {
			cache.addAll(config.priority.pages);
		});
}

let debug = output => {
	if (config.debug === true) {
		console.log(output);
	}
};
	// Runs if the client hasn't been here before
self.addEventListener('install', () => {
	debug('[SW] Install');
});

// Once installed, it runs
self.addEventListener('activate', (event) => {
	debug('[SW] Activate');

	event.waitUntil(precache(event.request));
});

// Triggers whenever an asset or page is fetched
self.addEventListener('fetch', event => {
	debug('[SW] Fetch');

	let request = event.request;
	let url = new URL(request.url);

	// Only deal with requests from the same domain.
	if (url.origin !== location.origin) {
		return;
	}

	// Ignore requests for Typo3
	if (request.url.includes('/typo3')) {
		return;
	}

	// Always fetch non-GET requests from the network.
	if (request.method !== 'GET') {
		event.respondWith(fetch(request));
		return;
	}

	// Get the resource
	let resource = fetch(request)
		// If it is a successfull response
		// Try network first and then cache
		.then(response => {
			cachePage(request, response);
			return response;
		})
		.catch(async () => {
			return (await caches.match(request.url)) || caches.match(config.offlineAsset);
		});

	event.respondWith(resource);

	return;

});
